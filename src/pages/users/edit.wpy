<template>
  <wux-dialog id="wux-dialog" />
  <wux-dialog id="wux-dialog--alert" />
  <wux-select id="wux-select--userGender" />
  <view class="page">
    <view class="page__bd">
      <wux-cell-group title="个人信息" label="">
        <wux-cell bind:click="updateNamePrompt" title="姓名" is-link extra="{{ user.name }}"></wux-cell>
        <wux-cell bind:click="updateGenderSelect" title="性别" is-link extra="{{ user.gender_diff }}"></wux-cell>
        <wux-cell bind:click="" title="手机号" is-link extra="{{ user.phone ? user.phone : '绑定手机号' }}" open-type="{{ user.phone ? '' : 'getPhoneNumber' }}" bindgetphonenumber="{{ user.phone ? '' : 'bindGetPhoneNumber'}}" bind:click="{{ user.phone ? 'updatePhonePrompt' : ''}}">
        </wux-cell>
      </wux-cell-group>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import {
    $wuxDialog,
    $wuxSelect
  } from '@/wux/index'
  export default class UserEdit extends wepy.page {
    config = {
      navigationBarTitleText: '修改个人信息',
      usingComponents: {
        'wux-cell-group': '../../wux/cell-group/index',
        'wux-cell': '../../wux/cell/index',
        'wux-dialog': '../../wux/dialog/index',
        'wux-select': '../../wux/select/index'
      }
    };
    data = {
      user: null,
      genderItems: [{
          'value': 'secret',
          'title': '保密'
        }, {
          'value': 'male',
          'title': '男'
        },
        {
          'value': 'female',
          'title': '女'
        }
      ],
    };
    async onShow() {
      this.user = await this.$parent.getCurrentUser()
      this.genderItems.forEach((item, index) => {
        if (item.value === this.user.gender) {
          this.user.gender_diff = item.title
          this.genderIndex = index
        }
      })
      this.$apply()
    }
    async updateUserInfo(data = {}) {
      try {
        let updateResponse = await api.authRequest({
          url: 'user',
          method: 'PUT',
          data: data
        })
        if (updateResponse.statusCode === 200) {
          this.user = updateResponse.data.data
          this.genderItems.forEach((item, index) => {
            if (item.value === this.user.gender) {
              this.user.gender_diff = item.title
              this.genderIndex = index
            }
          })
          wepy.setStorageSync('user', this.user)
          this.$apply()
        }
        return updateResponse
      } catch (err) {
        console.log(err)
        wepy.showModel({
          title: '提示',
          content: '服务器错误，请联系管理员'
        })
      }
    }
    methods = {
      async updateNamePrompt() {
        let _this = this
        $wuxDialog().prompt({
          resetOnClose: true,
          title: '修改昵称',
          content: '',
          fieldtype: 'text',
          password: false,
          defaultText: this.user.name,
          placeholder: '请输入姓名',
          maxlength: 8,
          async onConfirm(e, response) {
            let updateResponse = await _this.updateUserInfo({
              name: response
            })
          }
        })
      },
      async updatePhonePrompt() {
        let _this = this
        const verificationCodePrompt = async(verificationKey) => {
          $wuxDialog('#wux-dialog--alert').prompt({
            resetOnClose: true,
            title: '输入验证码',
            content: '',
            fieldtype: 'text',
            password: false,
            placeholder: '请输入收到的验证码',
            maxlength: 6,
            async onConfirm(e, response) {
              await _this.updateUserInfo({
                'verification_key': verificationKey,
                'verification_code': response
              })
            }
          })
        }
        $wuxDialog().prompt({
          resetOnClose: true,
          title: '修改手机号',
          content: '',
          fieldtype: 'text',
          password: false,
          defaultText: this.user.phone,
          placeholder: '请输入手机号',
          maxlength: 11,
          async onConfirm(e, response) {
            try {
              let verificationCodeResponse = await api.authRequest({
                url: 'verificationCodes',
                method: 'POST',
                data: {
                  'phone': response
                }
              })
              if (verificationCodeResponse.statusCode === 201) {
                await verificationCodePrompt(verificationCodeResponse.data.key)
              }
            } catch (err) {
              console.log(err)
              wepy.showModal({
                title: '提示',
                content: '服务器错误，请联系管理员'
              })
            }
          }
        })
      },
      async updateGenderSelect() {
        $wuxSelect('#wux-select--userGender').open({
          value: this.user.gender,
          options: this.genderItems,
          onConfirm: async(value, index, options) => {
            console.log('onConfirm', value, index, options)
            if (index !== -1) {
              await this.updateUserInfo({
                gender: value
              })
            }
          },
        })
      },
      async bindGetPhoneNumber(e) {
        if (e.detail.encryptedData && e.detail.iv) {
          try {
            let bindResponse = await api.authRequest({
              url: 'weapp/user/bindPhoneNumber',
              method: 'PUT',
              data: {
                encryptedData: e.detail.encryptedData,
                iv: e.detail.iv
              }
            })
            if (bindResponse.statusCode === 200) {
              this.user = bindResponse.data.data
              this.$apply()
              wepy.setStorageSync('user', this.user)
            }
          } catch (err) {
            console.log(err)
            wepy.showModal({
              title: '提示',
              content: '服务器错误，请联系管理员'
            })
          }
        }
      }
    }
  }
</script>
